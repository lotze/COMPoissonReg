// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// loglik_cmp
double loglik_cmp(const Rcpp::NumericVector& x, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, double hybrid_tol, double truncate_tol, double ymax);
RcppExport SEXP _COMPoissonReg_loglik_cmp(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP hybrid_tolSEXP, SEXP truncate_tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type hybrid_tol(hybrid_tolSEXP);
    Rcpp::traits::input_parameter< double >::type truncate_tol(truncate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_cmp(x, lambda, nu, hybrid_tol, truncate_tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// d_cmp
Rcpp::NumericVector d_cmp(const Rcpp::NumericVector& x, double lambda, double nu, bool take_log, bool normalize, double hybrid_tol, double truncate_tol, double ymax);
RcppExport SEXP _COMPoissonReg_d_cmp(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP take_logSEXP, SEXP normalizeSEXP, SEXP hybrid_tolSEXP, SEXP truncate_tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< double >::type hybrid_tol(hybrid_tolSEXP);
    Rcpp::traits::input_parameter< double >::type truncate_tol(truncate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(d_cmp(x, lambda, nu, take_log, normalize, hybrid_tol, truncate_tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// p_cmp
Rcpp::NumericVector p_cmp(const Rcpp::NumericVector& x, double lambda, double nu, double hybrid_tol, double truncate_tol, double ymax);
RcppExport SEXP _COMPoissonReg_p_cmp(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP hybrid_tolSEXP, SEXP truncate_tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type hybrid_tol(hybrid_tolSEXP);
    Rcpp::traits::input_parameter< double >::type truncate_tol(truncate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(p_cmp(x, lambda, nu, hybrid_tol, truncate_tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// q_cmp
Rcpp::NumericVector q_cmp(const Rcpp::NumericVector& logq, double lambda, double nu, double hybrid_tol, double truncate_tol, double ymax);
RcppExport SEXP _COMPoissonReg_q_cmp(SEXP logqSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP hybrid_tolSEXP, SEXP truncate_tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type logq(logqSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type hybrid_tol(hybrid_tolSEXP);
    Rcpp::traits::input_parameter< double >::type truncate_tol(truncate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(q_cmp(logq, lambda, nu, hybrid_tol, truncate_tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// r_cmp
Rcpp::NumericVector r_cmp(unsigned int n, double lambda, double nu, double hybrid_tol, double truncate_tol, double ymax);
RcppExport SEXP _COMPoissonReg_r_cmp(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP hybrid_tolSEXP, SEXP truncate_tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type hybrid_tol(hybrid_tolSEXP);
    Rcpp::traits::input_parameter< double >::type truncate_tol(truncate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(r_cmp(n, lambda, nu, hybrid_tol, truncate_tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// q_discrete
unsigned int q_discrete(double q, const Rcpp::NumericVector& cp);
RcppExport SEXP _COMPoissonReg_q_discrete(SEXP qSEXP, SEXP cpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type cp(cpSEXP);
    rcpp_result_gen = Rcpp::wrap(q_discrete(q, cp));
    return rcpp_result_gen;
END_RCPP
}
// z_prodlogj
Rcpp::NumericVector z_prodlogj(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, unsigned int max);
RcppExport SEXP _COMPoissonReg_z_prodlogj(SEXP lambdaSEXP, SEXP nuSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_prodlogj(lambda, nu, max));
    return rcpp_result_gen;
END_RCPP
}
// z_trunc
Rcpp::NumericVector z_trunc(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, double tol, bool take_log, double ymax);
RcppExport SEXP _COMPoissonReg_z_trunc(SEXP lambdaSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP take_logSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_trunc(lambda, nu, tol, take_log, ymax));
    return rcpp_result_gen;
END_RCPP
}
// z_approx
Rcpp::NumericVector z_approx(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, bool take_log);
RcppExport SEXP _COMPoissonReg_z_approx(SEXP lambdaSEXP, SEXP nuSEXP, SEXP take_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    rcpp_result_gen = Rcpp::wrap(z_approx(lambda, nu, take_log));
    return rcpp_result_gen;
END_RCPP
}
// z_hybrid
Rcpp::NumericVector z_hybrid(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, bool take_log, double hybrid_tol, double truncate_tol, double ymax);
RcppExport SEXP _COMPoissonReg_z_hybrid(SEXP lambdaSEXP, SEXP nuSEXP, SEXP take_logSEXP, SEXP hybrid_tolSEXP, SEXP truncate_tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< double >::type hybrid_tol(hybrid_tolSEXP);
    Rcpp::traits::input_parameter< double >::type truncate_tol(truncate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_hybrid(lambda, nu, take_log, hybrid_tol, truncate_tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// y_trunc
Rcpp::IntegerVector y_trunc(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, double tol, double ymax);
RcppExport SEXP _COMPoissonReg_y_trunc(SEXP lambdaSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(y_trunc(lambda, nu, tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// loglik_zicmp
double loglik_zicmp(const Rcpp::IntegerVector& x, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, const Rcpp::NumericVector& p, double hybrid_tol, double truncate_tol, double ymax);
RcppExport SEXP _COMPoissonReg_loglik_zicmp(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP pSEXP, SEXP hybrid_tolSEXP, SEXP truncate_tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type hybrid_tol(hybrid_tolSEXP);
    Rcpp::traits::input_parameter< double >::type truncate_tol(truncate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_zicmp(x, lambda, nu, p, hybrid_tol, truncate_tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// d_zicmp
Rcpp::NumericVector d_zicmp(const Rcpp::IntegerVector& x, double lambda, double nu, double p, bool take_log, double hybrid_tol, double truncate_tol, double ymax);
RcppExport SEXP _COMPoissonReg_d_zicmp(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP pSEXP, SEXP take_logSEXP, SEXP hybrid_tolSEXP, SEXP truncate_tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< double >::type hybrid_tol(hybrid_tolSEXP);
    Rcpp::traits::input_parameter< double >::type truncate_tol(truncate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(d_zicmp(x, lambda, nu, p, take_log, hybrid_tol, truncate_tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// q_zicmp
Rcpp::NumericVector q_zicmp(const Rcpp::NumericVector& logq, double lambda, double nu, double p, double hybrid_tol, double truncate_tol, double ymax);
RcppExport SEXP _COMPoissonReg_q_zicmp(SEXP logqSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP pSEXP, SEXP hybrid_tolSEXP, SEXP truncate_tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type logq(logqSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type hybrid_tol(hybrid_tolSEXP);
    Rcpp::traits::input_parameter< double >::type truncate_tol(truncate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(q_zicmp(logq, lambda, nu, p, hybrid_tol, truncate_tol, ymax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_COMPoissonReg_loglik_cmp", (DL_FUNC) &_COMPoissonReg_loglik_cmp, 6},
    {"_COMPoissonReg_d_cmp", (DL_FUNC) &_COMPoissonReg_d_cmp, 8},
    {"_COMPoissonReg_p_cmp", (DL_FUNC) &_COMPoissonReg_p_cmp, 6},
    {"_COMPoissonReg_q_cmp", (DL_FUNC) &_COMPoissonReg_q_cmp, 6},
    {"_COMPoissonReg_r_cmp", (DL_FUNC) &_COMPoissonReg_r_cmp, 6},
    {"_COMPoissonReg_q_discrete", (DL_FUNC) &_COMPoissonReg_q_discrete, 2},
    {"_COMPoissonReg_z_prodlogj", (DL_FUNC) &_COMPoissonReg_z_prodlogj, 3},
    {"_COMPoissonReg_z_trunc", (DL_FUNC) &_COMPoissonReg_z_trunc, 5},
    {"_COMPoissonReg_z_approx", (DL_FUNC) &_COMPoissonReg_z_approx, 3},
    {"_COMPoissonReg_z_hybrid", (DL_FUNC) &_COMPoissonReg_z_hybrid, 6},
    {"_COMPoissonReg_y_trunc", (DL_FUNC) &_COMPoissonReg_y_trunc, 4},
    {"_COMPoissonReg_loglik_zicmp", (DL_FUNC) &_COMPoissonReg_loglik_zicmp, 7},
    {"_COMPoissonReg_d_zicmp", (DL_FUNC) &_COMPoissonReg_d_zicmp, 8},
    {"_COMPoissonReg_q_zicmp", (DL_FUNC) &_COMPoissonReg_q_zicmp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_COMPoissonReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
