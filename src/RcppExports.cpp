// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cmp_allprobs
Rcpp::NumericVector cmp_allprobs(double lambda, double nu, double tol, bool take_log, double ymax, bool normalize);
RcppExport SEXP _COMPoissonReg_cmp_allprobs(SEXP lambdaSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP take_logSEXP, SEXP ymaxSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cmp_allprobs(lambda, nu, tol, take_log, ymax, normalize));
    return rcpp_result_gen;
END_RCPP
}
// dcmp_cpp
Rcpp::NumericVector dcmp_cpp(const Rcpp::NumericVector& x, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, double tol, bool take_log, double ymax);
RcppExport SEXP _COMPoissonReg_dcmp_cpp(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP take_logSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(dcmp_cpp(x, lambda, nu, tol, take_log, ymax));
    return rcpp_result_gen;
END_RCPP
}
// pcmp_cpp
Rcpp::NumericVector pcmp_cpp(const Rcpp::NumericVector& x, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, double tol, double ymax);
RcppExport SEXP _COMPoissonReg_pcmp_cpp(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(pcmp_cpp(x, lambda, nu, tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// qcmp_cpp
Rcpp::NumericVector qcmp_cpp(const Rcpp::NumericVector& logq, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, double tol, double ymax);
RcppExport SEXP _COMPoissonReg_qcmp_cpp(SEXP logqSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type logq(logqSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(qcmp_cpp(logq, lambda, nu, tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// rcmp_cpp
Rcpp::NumericVector rcmp_cpp(unsigned int n, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, double tol, double ymax);
RcppExport SEXP _COMPoissonReg_rcmp_cpp(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(rcmp_cpp(n, lambda, nu, tol, ymax));
    return rcpp_result_gen;
END_RCPP
}
// qdiscrete
double qdiscrete(double q, const Rcpp::NumericVector& p, bool log_scale);
RcppExport SEXP _COMPoissonReg_qdiscrete(SEXP qSEXP, SEXP pSEXP, SEXP log_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type log_scale(log_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(qdiscrete(q, p, log_scale));
    return rcpp_result_gen;
END_RCPP
}
// logsumprobs
double logsumprobs(const Rcpp::NumericVector& logprob, unsigned int baseidx);
RcppExport SEXP _COMPoissonReg_logsumprobs(SEXP logprobSEXP, SEXP baseidxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type logprob(logprobSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type baseidx(baseidxSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumprobs(logprob, baseidx));
    return rcpp_result_gen;
END_RCPP
}
// logcumprobs
Rcpp::NumericVector logcumprobs(const Rcpp::NumericVector& logprob);
RcppExport SEXP _COMPoissonReg_logcumprobs(SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(logcumprobs(logprob));
    return rcpp_result_gen;
END_RCPP
}
// z_prodj
Rcpp::NumericVector z_prodj(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, unsigned int max);
RcppExport SEXP _COMPoissonReg_z_prodj(SEXP lambdaSEXP, SEXP nuSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_prodj(lambda, nu, max));
    return rcpp_result_gen;
END_RCPP
}
// z_prodj2
Rcpp::NumericVector z_prodj2(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, unsigned int max);
RcppExport SEXP _COMPoissonReg_z_prodj2(SEXP lambdaSEXP, SEXP nuSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_prodj2(lambda, nu, max));
    return rcpp_result_gen;
END_RCPP
}
// z_prodjlogj
Rcpp::NumericVector z_prodjlogj(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, unsigned int max);
RcppExport SEXP _COMPoissonReg_z_prodjlogj(SEXP lambdaSEXP, SEXP nuSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_prodjlogj(lambda, nu, max));
    return rcpp_result_gen;
END_RCPP
}
// z_prodlogj
Rcpp::NumericVector z_prodlogj(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, unsigned int max);
RcppExport SEXP _COMPoissonReg_z_prodlogj(SEXP lambdaSEXP, SEXP nuSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_prodlogj(lambda, nu, max));
    return rcpp_result_gen;
END_RCPP
}
// z_prodlogj2
Rcpp::NumericVector z_prodlogj2(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, unsigned int max);
RcppExport SEXP _COMPoissonReg_z_prodlogj2(SEXP lambdaSEXP, SEXP nuSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_prodlogj2(lambda, nu, max));
    return rcpp_result_gen;
END_RCPP
}
// z_trunc
Rcpp::NumericVector z_trunc(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, double tol, bool take_log, double ymax);
RcppExport SEXP _COMPoissonReg_z_trunc(SEXP lambdaSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP take_logSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(z_trunc(lambda, nu, tol, take_log, ymax));
    return rcpp_result_gen;
END_RCPP
}
// z_approx
Rcpp::NumericVector z_approx(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, bool take_log);
RcppExport SEXP _COMPoissonReg_z_approx(SEXP lambdaSEXP, SEXP nuSEXP, SEXP take_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    rcpp_result_gen = Rcpp::wrap(z_approx(lambda, nu, take_log));
    return rcpp_result_gen;
END_RCPP
}
// z_hybrid
Rcpp::NumericVector z_hybrid(const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, bool take_log, double tol1, double tol2);
RcppExport SEXP _COMPoissonReg_z_hybrid(SEXP lambdaSEXP, SEXP nuSEXP, SEXP take_logSEXP, SEXP tol1SEXP, SEXP tol2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< double >::type tol1(tol1SEXP);
    Rcpp::traits::input_parameter< double >::type tol2(tol2SEXP);
    rcpp_result_gen = Rcpp::wrap(z_hybrid(lambda, nu, take_log, tol1, tol2));
    return rcpp_result_gen;
END_RCPP
}
// qzicmp_cpp
Rcpp::NumericVector qzicmp_cpp(const Rcpp::NumericVector& logq, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& nu, const Rcpp::NumericVector& p, double tol);
RcppExport SEXP _COMPoissonReg_qzicmp_cpp(SEXP logqSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP pSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type logq(logqSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(qzicmp_cpp(logq, lambda, nu, p, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_COMPoissonReg_cmp_allprobs", (DL_FUNC) &_COMPoissonReg_cmp_allprobs, 6},
    {"_COMPoissonReg_dcmp_cpp", (DL_FUNC) &_COMPoissonReg_dcmp_cpp, 6},
    {"_COMPoissonReg_pcmp_cpp", (DL_FUNC) &_COMPoissonReg_pcmp_cpp, 5},
    {"_COMPoissonReg_qcmp_cpp", (DL_FUNC) &_COMPoissonReg_qcmp_cpp, 5},
    {"_COMPoissonReg_rcmp_cpp", (DL_FUNC) &_COMPoissonReg_rcmp_cpp, 5},
    {"_COMPoissonReg_qdiscrete", (DL_FUNC) &_COMPoissonReg_qdiscrete, 3},
    {"_COMPoissonReg_logsumprobs", (DL_FUNC) &_COMPoissonReg_logsumprobs, 2},
    {"_COMPoissonReg_logcumprobs", (DL_FUNC) &_COMPoissonReg_logcumprobs, 1},
    {"_COMPoissonReg_z_prodj", (DL_FUNC) &_COMPoissonReg_z_prodj, 3},
    {"_COMPoissonReg_z_prodj2", (DL_FUNC) &_COMPoissonReg_z_prodj2, 3},
    {"_COMPoissonReg_z_prodjlogj", (DL_FUNC) &_COMPoissonReg_z_prodjlogj, 3},
    {"_COMPoissonReg_z_prodlogj", (DL_FUNC) &_COMPoissonReg_z_prodlogj, 3},
    {"_COMPoissonReg_z_prodlogj2", (DL_FUNC) &_COMPoissonReg_z_prodlogj2, 3},
    {"_COMPoissonReg_z_trunc", (DL_FUNC) &_COMPoissonReg_z_trunc, 5},
    {"_COMPoissonReg_z_approx", (DL_FUNC) &_COMPoissonReg_z_approx, 3},
    {"_COMPoissonReg_z_hybrid", (DL_FUNC) &_COMPoissonReg_z_hybrid, 5},
    {"_COMPoissonReg_qzicmp_cpp", (DL_FUNC) &_COMPoissonReg_qzicmp_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_COMPoissonReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
